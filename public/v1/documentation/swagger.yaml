swagger: '2.0'
info:
  description: |-
    This is documentatin for the ListenHard API. For every request you must include in the header: 
     Content-Type: application/json 

     For protected routes by authorization we use JWT. Each of these have a lock by them. Must include a Bearer Token in the header 
     Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
  version: 0.0.1
  title: ListenHard API mongoDB + JWT
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 'amaury.punel@grenoble-inp.org'
  license:
    name: GPL 3
    url: 'https://gitlab.com/listenHub/listenHard/blob/master/LICENSE'
basePath: /v1
tags:
  - name: user
    description: Authentication and More
    externalDocs:
      description: Find out more
      url: 'https://ensiwiki.ensimag.fr/index.php?title=CAW1_2018_Projet_de_Emilien_MOTTET_et_Amaury_PUNEL'
  - name: song
    description: Data about song 
    externalDocs:
      description: Find out more
      url: 'https://ensiwiki.ensimag.fr/index.php?title=CAW1_2018_Projet_de_Emilien_MOTTET_et_Amaury_PUNEL'
schemes:
  - http
  - https
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Creates user that can now be used for authentication
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Creates user
          required: true
          schema:
            $ref: '#/definitions/CreateUser'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/CreateUserResponse'
        '422':
          description: Invalid operation
          schema:
            $ref: '#/definitions/ApiErrorResponse'
    get:
      tags:
        - user
      summary: Return user
      description: This can only be done by the logged in user.
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ReturnUserResponse'
        '401':
          description: unauthorized
          schema:
            $ref: '#/definitions/ApiUnauthorizezdResponse'
      security:
        - Bearer: []
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - in: body
          name: body
          description: Creates user
          required: true
          schema:
            $ref: '#/definitions/UpdateUserBody'
      produces:
        - application/json
      responses:
        '200':
          description: successful request
          schema:
            $ref: '#/definitions/ApiSuccessResponse'
        '401':
          description: unauthorized
          schema:
            $ref: '#/definitions/ApiUnauthorizezdResponse'
      security:
        - Bearer: []
    delete:
      tags:
        - user
      summary: Soft delete user
      description: This can only be done by the logged in user.
      produces:
        - application/json
      responses:
        '204':
          description: success
          schema:
            $ref: '#/definitions/ApiSuccessResponse'
        '401':
          description: unauthorized
          schema:
            $ref: '#/definitions/ApiUnauthorizezdResponse'
        default:
          description: successful operation
      security:
        - Bearer: []
  /users/hard:
    delete:
      tags:
        - user
      summary: Hard delete user
      description: Remove user from database
      produces:
        - application/json
      responses:
        '204':
          description: success
          schema:
            $ref: '#/definitions/ApiSuccessResponse'
        '401':
          description: unauthorized
          schema:
            $ref: '#/definitions/ApiUnauthorizezdResponse'
        default:
          description: successful operation
      security:
        - Bearer: []
  /users/restore:
    put:
      tags:
        - user
      summary: Restore soft deleted user
      description: ''
      produces:
        - application/json
      responses:
        '204':
          description: success
          schema:
            $ref: '#/definitions/ApiSuccessResponse'
        '401':
          description: unauthorized
          schema:
            $ref: '#/definitions/ApiUnauthorizezdResponse'
        default:
          description: successful operation
      security:
        - Bearer: []
  /users/login:
    post:
      tags:
        - user
      summary: User Login
      description: Returns Bearer Token for JWT authentication
      operationId: createUsersWithArrayInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateUser'
      responses:
        '204':
          description: success
          schema:
            $ref: '#/definitions/LoginUserResponse'
        '422':
          description: error
          schema:
            $ref: '#/definitions/ApiErrorResponse'
  /songs:
    post:
      tags:
        - song
      summary: Create song and upload file
      description: Creates song which is add to this for the user
      operationId: createSong
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: track
          type: file
          required: true
          description: The song to upload (absolute path).
        - in: formData
          name: name
          type: string
          required: true
          description: name of the song
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/CreateSongResponse'
        '422':
          description: Invalid operation
          schema:
            $ref: '#/definitions/ApiErrorResponse'
        '400':
          description: Invalid operation
          schema:
            $ref: '#/definitions/ApiErrorResponse'
        '500':
          description: Invalid operation
          schema:
            $ref: '#/definitions/ApiErrorResponse'
      security:
        - Bearer: []
  /songs/bin/{songBinId}:
    get:
      tags:
        - song
      summary: get song
      description: get song by song id
      produces:
        - audio/mp3
      parameters:
      - name: "songBinId"
        in: "path"
        description: "ID of song to return"
        required: true
        type: "string"
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CreateSongResponse'
        '404':
          description: Invalid operation
          schema:
            $ref: '#/definitions/ApiErrorResponse'
      security:
        - Bearer: []
securityDefinitions:
 Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  CreateUser:
    type: object
    properties:
      unique_key | email | phone:
        type: string
        example: '8885678345'
      password:
        type: string
        example: secure-password
  CreateUserResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      message:
        type: string
        example: Successfully created new user.
      token:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        description: Authentication token
  LoginUserResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      token:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        description: Authentication token
  ReturnUserResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      user:
        type: object
        properties:
          first:
            type: string
            example: John
          last:
            type: string
            example: doe
          email:
            type: string
            example: john.doe@gmail.com
          phone:
            type: string
            example: '8889401234'
  UpdateUserBody:
    type: object
    properties:
      first:
        type: string
        example: John
      last:
        type: string
        example: doe
      email:
        type: string
        example: john.doe@gmail.com
      phone:
        type: string
        example: '8889401234'
  ApiErrorResponse:
    type: object
    properties:
      success:
        type: boolean
        example: false
      error:
        type: string
  ApiSuccessResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      message:
        type: string
  ApiUnauthorizezdResponse:
    type: string
    example: Unauthorized
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  CreateSong:
    type: object
    properties:
      unique_key | email | phone:
        type: string
        example: '8885678345'
      password:
        type: string
        example: secure-password
  CreateSongResponse:
    type: object
    properties:
      song:
        type: object
        properties:
          _id:
            type: string
            example: '5afc43cf67b8f6366fa824b1'
          name:
            type: string
            example: 'Billie Jean, Michael Jackson'
          users:
            type: array
            items:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    type: object
                    example: 
                _id:
                  type: string
                  example: '5afc43cf67b8f6366fa824b2'
                user:
                  type: string
                  example: '5afc3c6f28654c71c55b2ae5'
                  description: 'user object id'
          fileAudioBin:
            type: string
            example: '5afc43cf67b8f6366fa824ae'
          createdAt:
            type: string
            example: '2018-05-16T14:44:31.064Z'
          __v:
            type: integer
            example: 0
          id:
            type: string
            example: '5afc43cf67b8f6366fa824b1'
      success:
        type: boolean
        example: true
externalDocs:
  description: Ensiwiki page
  url: 'https://ensiwiki.ensimag.fr/index.php?title=CAW1_2018_Projet_de_Emilien_MOTTET_et_Amaury_PUNEL'
